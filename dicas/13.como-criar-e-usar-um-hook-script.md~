# Sobre Hooks do Git. Como crie um hook pre-commit que imprime algo no terminal.

## Objetivo: Automatizar verificações.

- Os Git hooks são scripts que o Git executa automaticamente antes ou depois de eventos como commit e push. Para criar um hook pre-commit que imprime uma mensagem, você precisa criar um script executável no diretório .git/hooks.

### Como criar um hook pre-commit

1. Navegue até o diretório de hooks

- Abra o terminal e acesse a pasta .git/hooks dentro do seu repositório local.

    `sh
        cd .git/hooks

2. Crie o arquivo do hook

- Crie um arquivo chamado pre-commit (sem extensão). Você pode usar os arquivos .sample existentes como referência.

    `sh
        touch pre-commit

3. Adicione o script

- Abra o arquivo pre-commit em um editor de texto e adicione o script que será executado. Para simplesmente imprimir uma mensagem, use o seguinte código:

    ``
        #!/bin/sh
        echo "Executando o hook de pre-commit..."

'OU' sejá criativo :)

    ``
        #!/bin/sh
        echo -e '\033[31;42m TREINO DE GIT: Executando o hook de pre-commit...\033[0m'

        echo " Imagem: "

        echo "
        ░▒▓████████▓▒░▒▓███████▓▒░░▒▓████████▓▒░▒▓█▓▒░▒▓███████▓▒░ ░▒▓██████▓▒░       ░▒▓███████▓▒░░▒▓████████▓▒░       ░▒▓██████▓▒░░▒▓█▓▒░▒▓████████▓▒░ 
           ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░  ░▒▓█▓▒░     
           ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░      ░▒▓█▓▒░  ░▒▓█▓▒░     
           ░▒▓█▓▒░   ░▒▓███████▓▒░░▒▓██████▓▒░ ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓██████▓▒░        ░▒▓█▓▒▒▓███▓▒░▒▓█▓▒░  ░▒▓█▓▒░     
           ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░  ░▒▓█▓▒░     
           ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░             ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░  ░▒▓█▓▒░     
           ░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░▒▓████████▓▒░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░░▒▓██████▓▒░       ░▒▓███████▓▒░░▒▓████████▓▒░       ░▒▓██████▓▒░░▒▓█▓▒░  ░▒▓█▓▒░     
                                                                                                                                                         
                                                                                                                                                         
        "

        echo -e '\033[34;43m Sucesso!\033[0m';
        echo " Detalhes: "

- #!/bin/sh define qual interpretador deve executar o script.
- echo é o comando que imprime o texto no terminal. 

4. Torne o script executável

- Este é um passo crucial. O Git só executará o hook se o arquivo tiver permissão de execução. 

    `sh
        chmod +x pre-commit

5. Teste o hook

- Agora, tente fazer um novo commit. Adicione um arquivo e execute git commit. Você verá a mensagem "Executando o hook de pre-commit..." impressa no terminal antes de o editor de mensagens de commit abrir.

### Como usar hooks para automação

O principal objetivo do pre-commit é validar o código que está prestes a ser comitado. Isso é feito através do status de saída do script:

* Status 0 (sucesso): O commit prossegue normalmente.
* Status diferente de 0 (falha): O Git aborta o commit, permitindo que você corrija os problemas. 

#### Exemplo prático de automação:

Hooks pre-commit são comumente usados para:

* Linters de código: Garantir que o código siga as diretrizes de estilo (com ferramentas como ESLint, Black, RuboCop).
* Testes unitários: Executar testes rápidos para evitar que código quebrado entre no repositório.
* Verificação de segurança: Impedir o commit acidental de chaves de API ou outras informações sensíveis.

