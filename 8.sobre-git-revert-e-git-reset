##Como usar o git revert?

    O comando git revert é usado para desfazer um commit específico, criando um novo commit que inverte as alterações do commit original. Ele não apaga o histórico, o que o torna uma opção segura, especialmente em branches compartilhadas, para evitar conflitos com outros desenvolvedores.

Cenário de uso
    Imagine que você fez um commit que introduziu um bug. O git revert é ideal para desfazer essa mudança sem reescrever o histórico de commits. 

-----

Como usar git revert:
    Passo 1: Encontrar o hash do commit

        - Primeiro, você precisa identificar o hash do commit que deseja reverter. Use git log para visualizar o histórico.

        'git log --oneline'

        - O resultado será algo parecido com isto:

        a72ef02 (HEAD -> main) Add a new feature
        86bb32e Fix a critical bug
        299b15f Initial commit

        - Neste exemplo, o commit que adicionou a nova funcionalidade (a72ef02) introduziu um erro e você quer revertê-lo.

    Passo 2: Reverter o commit

        - Execute o comando git revert seguido do hash do commit.

        'git revert a72ef02'

        - O Git abrirá seu editor de texto padrão para que você possa escrever uma mensagem de commit. A mensagem padrão já indica que a ação está revertendo um commit anterior, mas você pode personalizá-la. Salve e feche o arquivo.

    Passo 3: Verificar o histórico de commits

        - Execute git log novamente. Você verá um novo commit no histórico.

        'git log --oneline'

        - O resultado agora será parecido com isto:

        1061e79 (HEAD -> main) Revert "Add a new feature"
        a72ef02 Add a new feature
        86bb32e Fix a critical bug
        299b15f Initial commit

        - Observe que o commit a72ef02 ainda está no histórico, e o novo commit 1061e79 o reverte.

    Passo 4: Enviar as alterações

        - Agora, você pode enviar o novo commit de reversão para o repositório remoto.

        'git push origin main'

-----

Opções comuns do git revert

    git revert HEAD: Reverte o commit mais recente.
    git revert HEAD~1: Reverte o penúltimo commit.
    git revert <hash> --no-edit: Reverte o commit sem abrir o editor de texto, usando uma mensagem padrão para o novo commit.
    git revert <hash> --no-commit: Reverte o commit e aplica as mudanças, mas não cria o commit automaticamente. Isso permite que você faça outras alterações ou prepare as alterações antes de comitá-las manualmente.

-----

##Como usar o git reset?

    O comando git reset é usado para desfazer commits e mover o ponteiro da branch atual (HEAD) para um commit anterior. Ele é uma ferramenta poderosa, mas deve ser usada com cuidado, pois pode reescrever o histórico do projeto e causar a perda de dados, especialmente se os commits já tiverem sido enviados para um repositório remoto.

    O git reset possui três modos principais: --soft, --mixed (o padrão) e --hard. A escolha do modo afeta o que acontece com as mudanças depois que o HEAD é movido.

Exemplo de git reset --hard

    Este é o modo mais agressivo e deve ser usado com extrema cautela. Ele descarta todas as alterações feitas após o commit de destino, apagando completamente o histórico e as modificações.

    Cenário: Você fez três commits locais em sua branch main e percebeu que eles contêm erros e prefere começar do zero a partir do estado do projeto antes deles.

Passo 1: Visualize o histórico de commits:

    'git log --oneline'

    - Você verá algo como:

    a72ef02 (HEAD -> main) Adiciona nova funcionalidade
    86bb32e Corrige um bug crítico
    299b15f Commit inicial

Passo 2: Volte três commits atrás com --hard:

    'git reset --hard HEAD~3'

    - Ou, de forma alternativa, use o hash do commit de destino (299b15f neste caso):

    'git reset --hard 299b15f'

Passo 3: Verifique o histórico:

    'git log --oneline'

    - O histórico agora mostrará apenas o Commit inicial. Os três commits seguintes foram apagados, e todas as alterações nos arquivos correspondentes a esses commits foram descartadas do diretório de trabalho.

-----
-----

Quando usar cada modo de git reset?

    git reset --hard
        O que faz: Apaga o histórico de commits, a área de staging e o diretório de trabalho.	
        Melhor cenário de uso: Quando você quer descartar completamente as alterações e voltar a um estado anterior. Deve ser usado apenas localmente e com muito cuidado.

    git reset --soft
        O que faz: Apaga o histórico de commits, mas mantém as alterações na área de staging.	
        Melhor cenário de uso: Quando você quer desfazer um ou mais commits para agrupá-los ou fazer um amend antes de comitá-los novamente.

    git reset (ou --mixed)
        O que faz: Apaga o histórico de commits e a área de staging, mas mantém as alterações no diretório de trabalho.	
        Melhor cenário de uso: Quando você quer desfazer commits e reorganizar as alterações antes de comitá-las novamente.

-----

Diferença entre 'git revert' vs. 'git reset'

    git revert
        Histórico: Cria um novo commit para desfazer alterações, mantendo o histórico.	
        Segurança: É a opção mais segura para branches compartilhadas.	
        Uso comum: Desfazer alterações já enviadas para o repositório remoto.	

    git reset
        Histórico: Reescreve o histórico, removendo os commits.
        Segurança: Deve ser usado com cautela, especialmente em branches compartilhadas, pois reescrever o histórico pode causar problemas para outros desenvolvedores.
        Uso comum: Limpar o histórico de commits locais antes de enviá-los.




