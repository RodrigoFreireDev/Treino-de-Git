Como criar conflito(git) de propósito para resolver localmente?
    
Para criar um conflito no Git de propósito e resolvê-lo localmente, você precisa simular um cenário onde dois branches (ramos) fazem alterações conflitantes no mesmo arquivo. 
Passo 1: Preparar o ambiente
Crie um novo diretório para o repositório e inicialize o Git:
sh
mkdir conflito-exemplo
cd conflito-exemplo
git init
Use o código com cuidado.

Crie um arquivo e faça o primeiro commit na branch principal (main ou master):
sh
echo "Linha 1 do arquivo." > arquivo.txt
git add arquivo.txt
git commit -m "Commit inicial"
Use o código com cuidado.

 
Passo 2: Criar o primeiro branch e fazer uma alteração 
Crie e mude para um novo branch chamado feature-1:
sh
git checkout -b feature-1
Use o código com cuidado.

Altere o conteúdo do arquivo de forma intencional:
sh
echo "Alteração da feature-1." > arquivo.txt
git add arquivo.txt
git commit -m "Alteração da feature-1 no arquivo"
Use o código com cuidado.

Passo 3: Criar o segundo branch e fazer a alteração conflitante 
Volte para a branch principal (main ou master):
sh
git checkout main
Use o código com cuidado.

Crie e mude para um segundo branch chamado feature-2:
sh
git checkout -b feature-2
Use o código com cuidado.

Altere o mesmo trecho do arquivo arquivo.txt, mas com um conteúdo diferente do que foi feito em feature-1:
sh
echo "Alteração da feature-2." > arquivo.txt
git add arquivo.txt
git commit -m "Alteração da feature-2 no arquivo"
Use o código com cuidado.

Passo 4: Mesclar e gerar o conflito 
Volte para a branch feature-1:
sh
git checkout feature-1
Use o código com cuidado.

Tente fazer o merge (mesclagem) da feature-2 para a feature-1. Isso irá gerar um conflito, pois o Git não sabe qual alteração manter:
sh
git merge feature-2
Use o código com cuidado.

Você verá uma mensagem semelhante a esta, indicando o conflito:
Auto-merging arquivo.txt
CONFLICT (content): Merge conflict in arquivo.txt
Automatic merge failed; fix conflicts and then commit the result.
 
Passo 5: Resolver o conflito localmente 
Verifique o arquivo arquivo.txt. O Git irá marcar os trechos em conflito com <<<<<<<, ======= e >>>>>>>:
<<<<<<< HEAD
Alteração da feature-1.
=======
Alteração da feature-2.
>>>>>>> feature-2
<<<<<<< HEAD: Indica o início do conflito e a versão do branch atual (feature-1).
=======: Separa as duas versões.
>>>>>>> feature-2: Indica o final do conflito e a versão do branch que está sendo mesclado (feature-2).
Edite o arquivo arquivo.txt e escolha qual versão do código manter, ou combine ambas as versões da forma que desejar. Por exemplo, você pode decidir manter as duas linhas ou criar uma nova.
Exemplo:
Alteração da feature-1 e alteração da feature-2 combinadas.
Após a edição, remova os marcadores de conflito (<<<<<<<, =======, >>>>>>>) e salve o arquivo. 
Passo 6: Finalizar a mesclagem
Adicione o arquivo modificado para marcar a resolução do conflito:
sh
git add arquivo.txt
Use o código com cuidado.

Conclua o commit da mesclagem, que o Git já preparou para você:
sh
git commit -m "Resolve conflito ao mesclar feature-2"
Use o código com cuidado.

Com isso, o conflito está resolvido, e a feature-2 foi mesclada com sucesso na feature-1. 
